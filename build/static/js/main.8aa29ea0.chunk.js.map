{"version":3,"sources":["common/AuthorizationClient.ts","common/DefaultViewerProps.ts","EmphasizeElementsApi.tsx","EmphasizeElementsWidget.tsx","common/MapLayerOptions.ts","common/ViewSetup.ts","EmphasizeElementsApp.tsx","index.tsx"],"names":["SandboxAuthorizationClient","BrowserAuthorizationClient","constructor","configuration","super","authConfig","this","validateConfiguration","clientId","Error","scope","redirectUri","BrowserAuthorizationCallbackHandler","handleSigninCallback","then","async","signIn","catch","error","console","authClient","process","postSignoutRedirectUri","responseType","authority","default3DSandboxUi","contentManipulationTools","cornerItem","hideDefault","hideDefaultHorizontalItems","hideDefaultVerticalItems","verticalItems","sectionTools","measureTools","selectTool","horizontalItems","clearSelection","clearHideIsolateEmphasizeElements","isolateElements","hideElements","emphasizeElements","navigationTools","walkView","cameraView","rotateView","panView","fitView","windowArea","undoView","redoView","hideDefaultStatusBar","hidePropertyGrid","hideToolSettings","hideTreeView","EmphasizeElementsApi","vp","EmphasizeElements","getOrCreate","emphasizeSelectedElements","clearEmphasizedElements","hideSelectedElements","clearHiddenElements","isolateSelectedElements","clearIsolatedElements","colorValue","overrideSelectedElements","FeatureOverrideType","ColorOnly","clearOverriddenElements","ActionType","EmphasizeElementsWidget","selectionIsEmptyState","setSelectionIsEmptyState","React","useState","emphasizeIsActiveState","setEmphasizeIsActiveState","hideIsActiveState","setHideIsActiveState","isolateIsActiveState","setIsolateIsActiveState","overrideIsActiveState","setOverrideIsActiveState","colorValueState","setColorValueState","ColorDef","red","useEffect","Presentation","selection","selectionChange","addListener","_onSelectionChanged","IModelApp","viewManager","selectedView","undefined","provider","evt","selectionProvider","getSelection","imodel","level","isEmpty","_handleActionButton","type","Emphasize","Isolate","Hide","Override","_handleClearButton","className","Text","Button","size","styleType","onClick","disabled","initialColor","onColorPick","Alert","mapLayerOptions","BingMaps","key","value","MapboxImagery","metroStationImodelName","ViewSetup","defaultViewId","views","queryDefaultViewId","Id64","isValid","spatialViews","getViewList","from","SpatialViewState","classFullName","length","id","drawingViews","DrawingViewState","viewDiv","document","getElementById","clientWidth","clientHeight","viewState","aspect","getAspectRatio","adjustAspectRatio","viewFlags","copy","shadows","grid","visibleEdges","is3d","displayStyle","getDisplayStyle3d","changeBackgroundMapProps","useDepthBuffer","groundBias","getGroundBias","environment","Environment","fromJSON","sky","display","twoColor","zenithColor","computeTbgrFromString","nadirColor","name","modelIds","getModelIds","subCategoryIds","getSubCategoryIds","planarClipMaskSettings","PlanarClipMaskSettings","create","clone","mode","PlanarClipMaskMode","IncludeSubCategories","planarClipMask","toJSON","isSpatialView","modelsForMasking","transparency","forEach","modelSelector","dropModels","addModels","setOrigin","x","y","z","setExtents","setRotation","Matrix3d","shownCategories","getShownCategories","categorySelector","addCategories","hiddenCategories","getHiddenCategories","dropCategories","iModel","ids","Set","isClosed","modelNames","query","join","row","add","subcategoriesIds","categoryCodes","selectSubCategories","getDefaultView","viewId","getFirstViewDefinitionId","load","overrideView","addIdsByCategory","selectInCategories","push","uiProviders","EmphasizeElementsWidgetProvider","provideWidgets","_stageId","_stageUsage","location","_section","widgets","StagePanelLocation","Bottom","label","defaultState","WidgetState","Open","getWidgetContent","viewportOptions","FrontstageManager","onFrontstageReadyEvent","event","bottomPanel","frontstageDef","EmphasizeElementsApp","iTwinId","iModelId","enablePerformanceMonitors","defaultUiConfig","theme","ReactDOM","render"],"mappings":"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","file":"static/js/main.8aa29ea0.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport {\r\n  BrowserAuthorizationCallbackHandler,\r\n  BrowserAuthorizationClient,\r\n  BrowserAuthorizationClientConfiguration\r\n} from \"@itwin/browser-authorization\";\r\n\r\n// This is a thin wrapper class on BrowserAuthorizationClient to validate OIDC configuration\r\nclass SandboxAuthorizationClient extends BrowserAuthorizationClient {\r\n\r\n  private authConfig: BrowserAuthorizationClientConfiguration;\r\n\r\n  constructor(configuration: BrowserAuthorizationClientConfiguration) {\r\n    super(configuration);\r\n    this.validateConfiguration(configuration);\r\n    this.authConfig = configuration;\r\n  }\r\n\r\n  private validateConfiguration(configuration: BrowserAuthorizationClientConfiguration) {\r\n    if (!configuration.clientId) {\r\n      throw new Error(\"Please add a valid OIDC client id to the .env file and restart the application. See the README for more information.\");\r\n    }\r\n    if (!configuration.scope) {\r\n      throw new Error(\"Please add valid scopes for your OIDC client to the .env file and restart the application. See the README for more information.\");\r\n    }\r\n    if (!configuration.redirectUri) {\r\n      throw new Error(\"Please add a valid redirect URI to the .env file and restart the application. See the README for more information.\");\r\n    }\r\n  }\r\n\r\n  // This method combines sign-in and redirect callback handling. Initially it tries to handleSigninCallback,\r\n  // if current url does not match redirectUri (this is the case on the first launch), it returns immediately and executes signIn which initiates oauth authorization flow.\r\n  // Once authorization flow completes, authority server makes a redirect to redirectUri. It reloads the App and handleSigninCallback does it job reading access token.\r\n  // Sandbox accomplish authorization in the background before executing the code, therefore signIn gets already available token from the localStore cache.\r\n  // Full interactive sign-in flow kicks in if you export the project from the Sandbox and run it locally.\r\n  public async signIn() {\r\n    return BrowserAuthorizationCallbackHandler.handleSigninCallback(this.authConfig.redirectUri)\r\n      .then(async () => super.signIn())\r\n      .catch((error) => console.error(error));\r\n  }\r\n}\r\n\r\n// Authorization Client configuration values are provided by the Sandbox runtime\r\n// If this Sandbox is exported, configuration must be provided in\r\n// the .env file of the project. Please visit developer.bentley.com to\r\n// register Application and get Authorization Client details\r\nexport const authClient = new SandboxAuthorizationClient({\r\n  scope: process.env.IMJS_AUTH_CLIENT_SCOPES || \"\",\r\n  clientId: process.env.IMJS_AUTH_CLIENT_CLIENT_ID || \"\",\r\n  redirectUri: process.env.IMJS_AUTH_CLIENT_REDIRECT_URI || \"\",\r\n  postSignoutRedirectUri: process.env.IMJS_AUTH_CLIENT_LOGOUT_URI,\r\n  responseType: \"code\",\r\n  authority: process.env.IMJS_AUTH_AUTHORITY,\r\n});\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { ItwinViewerUi } from \"@itwin/web-viewer-react\";\r\n\r\nexport const default3DSandboxUi: ItwinViewerUi = {\r\n  contentManipulationTools: {\r\n    cornerItem: {\r\n      hideDefault: true,\r\n    },\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      sectionTools: false,\r\n      measureTools: false,\r\n      selectTool: false,\r\n    },\r\n    horizontalItems: {\r\n      clearSelection: false,\r\n      clearHideIsolateEmphasizeElements: false,\r\n      isolateElements: false,\r\n      hideElements: false,\r\n      emphasizeElements: false,\r\n    },\r\n  },\r\n  navigationTools: {\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      walkView: true,\r\n      cameraView: true,\r\n    },\r\n    horizontalItems: {\r\n      rotateView: true,\r\n      panView: true,\r\n      fitView: true,\r\n      windowArea: true,\r\n      undoView: true,\r\n      redoView: true,\r\n    },\r\n  },\r\n  hideDefaultStatusBar: true,\r\n  hidePropertyGrid: true,\r\n  hideToolSettings: true,\r\n  hideTreeView: true,\r\n};\r\n\r\nexport const default3DAppUi: ItwinViewerUi = {\r\n  contentManipulationTools: {\r\n    cornerItem: {\r\n      hideDefault: true,\r\n    },\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      sectionTools: true,\r\n      measureTools: true,\r\n      selectTool: true,\r\n    },\r\n    horizontalItems: {\r\n      clearSelection: true,\r\n      clearHideIsolateEmphasizeElements: true,\r\n      isolateElements: true,\r\n      hideElements: true,\r\n      emphasizeElements: true,\r\n    },\r\n  },\r\n  navigationTools: {\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      walkView: true,\r\n      cameraView: true,\r\n    },\r\n    horizontalItems: {\r\n      rotateView: true,\r\n      panView: true,\r\n      fitView: true,\r\n      windowArea: true,\r\n      undoView: true,\r\n      redoView: true,\r\n    },\r\n  },\r\n  hideDefaultStatusBar: false,\r\n  hidePropertyGrid: true,\r\n  hideToolSettings: true,\r\n  hideTreeView: true,\r\n};\r\n\r\nexport const default2DSandboxUi: ItwinViewerUi = {\r\n  contentManipulationTools: {\r\n    cornerItem: {\r\n      hideDefault: true,\r\n    },\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      sectionTools: false,\r\n      measureTools: false,\r\n      selectTool: false,\r\n    },\r\n    horizontalItems: {\r\n      clearSelection: false,\r\n      clearHideIsolateEmphasizeElements: false,\r\n      isolateElements: false,\r\n      hideElements: false,\r\n      emphasizeElements: false,\r\n    },\r\n  },\r\n  navigationTools: {\r\n    hideDefaultHorizontalItems: false,\r\n    hideDefaultVerticalItems: false,\r\n    verticalItems: {\r\n      walkView: false,\r\n      cameraView: false,\r\n    },\r\n    horizontalItems: {\r\n      rotateView: false,\r\n      panView: true,\r\n      fitView: true,\r\n      windowArea: true,\r\n      undoView: true,\r\n      redoView: true,\r\n    },\r\n  },\r\n  hideDefaultStatusBar: true,\r\n  hidePropertyGrid: true,\r\n  hideToolSettings: true,\r\n  hideTreeView: true,\r\n};\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { ColorDef, FeatureOverrideType } from \"@itwin/core-common\";\r\nimport { EmphasizeElements, ScreenViewport } from \"@itwin/core-frontend\";\r\n\r\n\r\nexport class EmphasizeElementsApi {\r\n\r\n\r\n  public static emphasizeSelectedElements(vp: ScreenViewport) {\r\n    const provider = EmphasizeElements.getOrCreate(vp);\r\n    provider.emphasizeSelectedElements(vp);\r\n  }\r\n\r\n  public static clearEmphasizedElements(vp: ScreenViewport) {\r\n    const provider = EmphasizeElements.getOrCreate(vp);\r\n    provider.clearEmphasizedElements(vp);\r\n  }\r\n\r\n\r\n\r\n  public static hideSelectedElements(vp: ScreenViewport) {\r\n    const provider = EmphasizeElements.getOrCreate(vp);\r\n    provider.hideSelectedElements(vp);\r\n  }\r\n\r\n  public static clearHiddenElements(vp: ScreenViewport) {\r\n    const provider = EmphasizeElements.getOrCreate(vp);\r\n    provider.clearHiddenElements(vp);\r\n  }\r\n\r\n\r\n\r\n  public static isolateSelectedElements(vp: ScreenViewport) {\r\n    const provider = EmphasizeElements.getOrCreate(vp);\r\n    provider.isolateSelectedElements(vp);\r\n  }\r\n\r\n  public static clearIsolatedElements(vp: ScreenViewport) {\r\n    const provider = EmphasizeElements.getOrCreate(vp);\r\n    provider.clearIsolatedElements(vp);\r\n  }\r\n\r\n\r\n\r\n  public static overrideSelectedElements(colorValue: ColorDef, vp: ScreenViewport) {\r\n    const provider = EmphasizeElements.getOrCreate(vp);\r\n    provider.overrideSelectedElements(vp, colorValue, FeatureOverrideType.ColorOnly, false, true);\r\n  }\r\n\r\n  public static clearOverriddenElements(vp: ScreenViewport) {\r\n    const provider = EmphasizeElements.getOrCreate(vp);\r\n    provider.clearOverriddenElements(vp);\r\n  }\r\n\r\n}\r\n\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport React, { useEffect } from \"react\";\r\nimport { AbstractWidgetProps, StagePanelLocation, StagePanelSection, UiItemsProvider, WidgetState } from \"@itwin/appui-abstract\";\r\nimport { ColorDef } from \"@itwin/core-common\";\r\nimport { EmphasizeElements, IModelApp } from \"@itwin/core-frontend\";\r\nimport { ColorPickerButton } from \"@itwin/imodel-components-react\";\r\nimport { Alert, Button, Text } from \"@itwin/itwinui-react\";\r\nimport { ISelectionProvider, Presentation, SelectionChangeEventArgs } from \"@itwin/presentation-frontend\";\r\nimport { EmphasizeElementsApi } from \"./EmphasizeElementsApi\";\r\nimport \"./EmphasizeElements.scss\";\r\n\r\nenum ActionType {\r\n  Emphasize = \"Emphasize\",\r\n  Isolate = \"Isolate\",\r\n  Hide = \"Hide\",\r\n  Override = \"Color\",\r\n}\r\n\r\nexport const EmphasizeElementsWidget = () => {\r\n\r\n  const [selectionIsEmptyState, setSelectionIsEmptyState] = React.useState<boolean>(true);\r\n  const [emphasizeIsActiveState, setEmphasizeIsActiveState] = React.useState<boolean>(false);\r\n  const [hideIsActiveState, setHideIsActiveState] = React.useState<boolean>(false);\r\n  const [isolateIsActiveState, setIsolateIsActiveState] = React.useState<boolean>(false);\r\n  const [overrideIsActiveState, setOverrideIsActiveState] = React.useState<boolean>(false);\r\n  const [colorValueState, setColorValueState] = React.useState<ColorDef>(ColorDef.red);\r\n\r\n  useEffect(() => {\r\n    Presentation.selection.selectionChange.addListener(_onSelectionChanged);\r\n\r\n    /** This function is called when the widget is destroyed, similar to ComponentWillUnmount */\r\n    return () => {\r\n      const vp = IModelApp.viewManager.selectedView;\r\n\r\n      if (undefined === vp)\r\n        return;\r\n\r\n      const provider = EmphasizeElements.getOrCreate(vp);\r\n      provider.clearEmphasizedElements(vp);\r\n      provider.clearHiddenElements(vp);\r\n      provider.clearIsolatedElements(vp);\r\n      provider.clearOverriddenElements(vp);\r\n    };\r\n  }, []);\r\n\r\n\r\n  const _onSelectionChanged = (evt: SelectionChangeEventArgs, selectionProvider: ISelectionProvider) => {\r\n    const selection = selectionProvider.getSelection(evt.imodel, evt.level);\r\n    setSelectionIsEmptyState(selection.isEmpty);\r\n  };\r\n\r\n  const _onColorPick = (colorValue: ColorDef) => {\r\n    setColorValueState(colorValue);\r\n  };\r\n\r\n\r\n  const _handleActionButton = (type: ActionType) => {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n\r\n    if (undefined === vp)\r\n      return;\r\n\r\n    switch (type) {\r\n      default:\r\n      case ActionType.Emphasize: {\r\n        EmphasizeElementsApi.emphasizeSelectedElements(vp);\r\n        setEmphasizeIsActiveState(true);\r\n        break;\r\n      }\r\n      case ActionType.Isolate: {\r\n        EmphasizeElementsApi.isolateSelectedElements(vp);\r\n        setIsolateIsActiveState(true);\r\n        break;\r\n      }\r\n      case ActionType.Hide: {\r\n        EmphasizeElementsApi.hideSelectedElements(vp);\r\n        setHideIsActiveState(true);\r\n        break;\r\n      }\r\n      case ActionType.Override: {\r\n        EmphasizeElementsApi.overrideSelectedElements(colorValueState, vp);\r\n        setOverrideIsActiveState(true);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const _handleClearButton = (type: ActionType) => {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n\r\n    if (undefined === vp)\r\n      return;\r\n\r\n    switch (type) {\r\n      default:\r\n      case ActionType.Emphasize: {\r\n        EmphasizeElementsApi.clearEmphasizedElements(vp);\r\n        setEmphasizeIsActiveState(false);\r\n        break;\r\n      }\r\n      case ActionType.Isolate: {\r\n        EmphasizeElementsApi.clearIsolatedElements(vp);\r\n        setIsolateIsActiveState(false);\r\n        break;\r\n      }\r\n      case ActionType.Hide: {\r\n        EmphasizeElementsApi.clearHiddenElements(vp);\r\n        setHideIsActiveState(false);\r\n        break;\r\n      }\r\n      case ActionType.Override: {\r\n        EmphasizeElementsApi.clearOverriddenElements(vp);\r\n        setOverrideIsActiveState(false);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"sample-options\">\r\n      <div className=\"sample-grid\">\r\n        <div className=\"control\">\r\n          <Text>Emphasize</Text>\r\n          <span />\r\n          <Button size=\"small\" styleType=\"cta\" onClick={() => _handleActionButton(ActionType.Emphasize)} disabled={selectionIsEmptyState}>Apply</Button>\r\n          <Button size=\"small\" styleType=\"cta\" onClick={() => _handleClearButton(ActionType.Emphasize)} disabled={!emphasizeIsActiveState}>Clear</Button>\r\n        </div>\r\n        <div className=\"control\">\r\n          <Text>Hide</Text>\r\n          <span />\r\n          <Button size=\"small\" styleType=\"cta\" onClick={() => _handleActionButton(ActionType.Hide)} disabled={selectionIsEmptyState}>Apply</Button>\r\n          <Button size=\"small\" styleType=\"cta\" onClick={() => _handleClearButton(ActionType.Hide)} disabled={!hideIsActiveState}>Clear</Button>\r\n\r\n        </div>\r\n        <div className=\"control\">\r\n          <Text>Isolate</Text>\r\n          <span />\r\n          <Button size=\"small\" styleType=\"cta\" onClick={() => _handleActionButton(ActionType.Isolate)} disabled={selectionIsEmptyState}>Apply</Button>\r\n          <Button size=\"small\" styleType=\"cta\" onClick={() => _handleClearButton(ActionType.Isolate)} disabled={!isolateIsActiveState}>Clear</Button>\r\n        </div>\r\n        <div className=\"control\">\r\n          <Text>Override</Text>\r\n          <ColorPickerButton initialColor={colorValueState} onColorPick={_onColorPick} disabled={selectionIsEmptyState} />\r\n          <Button size=\"small\" styleType=\"cta\" onClick={() => _handleActionButton(ActionType.Override)} disabled={selectionIsEmptyState}>Apply</Button>\r\n          <Button size=\"small\" styleType=\"cta\" onClick={() => _handleClearButton(ActionType.Override)} disabled={!overrideIsActiveState}>Clear</Button>\r\n        </div>\r\n      </div>\r\n      <Alert type=\"informational\" className=\"instructions\">\r\n        Select one or more elements. Click one of the Apply buttons\r\n      </Alert>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport class EmphasizeElementsWidgetProvider implements UiItemsProvider {\r\n  public readonly id: string = \"EmphasizeElementsWidgetProvider\";\r\n\r\n  public provideWidgets(_stageId: string, _stageUsage: string, location: StagePanelLocation, _section?: StagePanelSection): ReadonlyArray<AbstractWidgetProps> {\r\n    const widgets: AbstractWidgetProps[] = [];\r\n    if (location === StagePanelLocation.Bottom) {\r\n      widgets.push(\r\n        {\r\n          id: \"EmphasizeElementsWidget\",\r\n          label: \"Emphasize Elements Selector\",\r\n          defaultState: WidgetState.Open,\r\n          getWidgetContent: () => <EmphasizeElementsWidget />,\r\n        }\r\n      );\r\n    }\r\n    return widgets;\r\n  }\r\n\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { MapLayerOptions, TileAdmin } from \"@itwin/core-frontend\";\r\n\r\n// Sandbox provides map key values at runtime, however it's required to create your own account at map providers and\r\n// get appropriate access tokens for your own projects (or exported Sandbox)\r\nexport const mapLayerOptions: MapLayerOptions = {\r\n  // Api key for Bing Maps service. For more information https://www.microsoft.com/en-us/maps/create-a-bing-maps-key\r\n  BingMaps: {\r\n    key: \"key\",\r\n    value: process.env.IMJS_BING_MAPS_KEY || \"\",\r\n  },\r\n\r\n  // Access token for Map Box service. For more information: https://docs.mapbox.com/help/getting-started/access-tokens\r\n  MapboxImagery: {\r\n    key: \"access_token\",\r\n    value: process.env.IMJS_MAP_BOX_KEY || \"\",\r\n  },\r\n};\r\n\r\n// Access token for Cesium service. For more information: https://cesium.com/learn/ion/cesium-ion-access-tokens\r\nexport const tileAdminOptions: TileAdmin.Props = {\r\n  cesiumIonKey: process.env.IMJS_CESIUM_ION_KEY || \"\",\r\n};\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { Id64, Id64Array, Id64Set, Id64String } from \"@itwin/core-bentley\";\r\nimport { Matrix3d } from \"@itwin/core-geometry\";\r\nimport { ColorDef, Environment, PlanarClipMaskMode, PlanarClipMaskSettings } from \"@itwin/core-common\";\r\nimport { DrawingViewState, IModelConnection, SpatialViewState, ViewState } from \"@itwin/core-frontend\";\r\n\r\nconst metroStationImodelName = \"DRWR04-S3\";\r\nexport class ViewSetup {\r\n  /** Queries for and loads the default view for an iModel. */\r\n  public static getDefaultView = async (imodel: IModelConnection): Promise<ViewState> => {\r\n    const viewId = await ViewSetup.getFirstViewDefinitionId(imodel);\r\n\r\n    // Load the view state using the viewSpec's ID\r\n    const viewState = await imodel.views.load(viewId);\r\n\r\n    // Making some improvements to the default views.\r\n    await ViewSetup.overrideView(imodel, viewState);\r\n\r\n    return viewState;\r\n  };\r\n\r\n  /** Pick the first available spatial view definition in the imodel */\r\n  private static async getFirstViewDefinitionId(imodel: IModelConnection): Promise<Id64String> {\r\n    // Return default view definition (if any)\r\n    const defaultViewId = await imodel.views.queryDefaultViewId();\r\n    if (Id64.isValid(defaultViewId))\r\n      return defaultViewId;\r\n\r\n    // Return first spatial view definition (if any)\r\n    const spatialViews: IModelConnection.ViewSpec[] = await imodel.views.getViewList({ from: SpatialViewState.classFullName });\r\n    if (spatialViews.length > 0)\r\n      return spatialViews[0].id;\r\n\r\n    // Return first drawing view definition (if any)\r\n    const drawingViews: IModelConnection.ViewSpec[] = await imodel.views.getViewList({ from: DrawingViewState.classFullName });\r\n    if (drawingViews.length > 0)\r\n      return drawingViews[0].id;\r\n\r\n    throw new Error(\"No valid view definitions in imodel\");\r\n  }\r\n\r\n  /** Returns the aspect ration of the container the view will be created in. */\r\n  public static getAspectRatio(): number | undefined {\r\n    const viewDiv = document.getElementById(\"sample-container\");\r\n\r\n    if (null === viewDiv)\r\n      return undefined;\r\n\r\n    return viewDiv.clientWidth / viewDiv.clientHeight;\r\n  }\r\n\r\n  /** Makes ascetic changes to the default view */\r\n  public static async overrideView(imodel: IModelConnection, viewState: ViewState) {\r\n    const aspect = ViewSetup.getAspectRatio();\r\n    if (undefined !== aspect) {\r\n      viewState.adjustAspectRatio(aspect);\r\n    }\r\n\r\n    viewState.viewFlags = viewState.viewFlags.copy({ shadows: false, grid: false, visibleEdges: false });\r\n\r\n    if (viewState.is3d()) {\r\n      const viewState3d = viewState;\r\n      const displayStyle = viewState3d.getDisplayStyle3d();\r\n\r\n      displayStyle.changeBackgroundMapProps({ useDepthBuffer: true });\r\n      const groundBias: number | undefined = await ViewSetup.getGroundBias(imodel);\r\n      if (groundBias) {\r\n        displayStyle.changeBackgroundMapProps({ groundBias });\r\n      }\r\n\r\n      // Enable the sky-box, but override to old sky box.\r\n      displayStyle.environment = Environment.fromJSON({\r\n        sky: {\r\n          display: true,\r\n          twoColor: true,\r\n          zenithColor: ColorDef.computeTbgrFromString(\"#DEF2FF\"),\r\n          nadirColor: ColorDef.computeTbgrFromString(\"#F0ECE8\"),\r\n        },\r\n      });\r\n\r\n      // Enable model masking on the metrostation model.\r\n      if (imodel.name === \"Metrostation2\" || imodel.name === metroStationImodelName) {\r\n        const modelIds = await ViewSetup.getModelIds(imodel);\r\n        const subCategoryIds = await this.getSubCategoryIds(imodel, \"S-SLAB-CONC\");\r\n        let planarClipMaskSettings = PlanarClipMaskSettings.create({ subCategoryIds, modelIds });\r\n        planarClipMaskSettings = planarClipMaskSettings.clone({ mode: PlanarClipMaskMode.IncludeSubCategories });\r\n        displayStyle.changeBackgroundMapProps({\r\n          planarClipMask: planarClipMaskSettings.toJSON(),\r\n        });\r\n      }\r\n    }\r\n\r\n    if (viewState.isSpatialView()) {\r\n      const displayStyle = viewState.getDisplayStyle3d();\r\n      // Enable model masking on the Stadium model.\r\n      if (imodel.name === \"Stadium\") {\r\n        const modelsForMasking = await ViewSetup.getModelIds(imodel, \"SS_MasterLandscape.dgn, LandscapeModel\");\r\n\r\n        displayStyle.changeBackgroundMapProps({\r\n          planarClipMask: PlanarClipMaskSettings.create({ modelIds: modelsForMasking }).toJSON(),\r\n          transparency: 0.01, // Temporary fix due to how the planar clip and transparency interact.\r\n        });\r\n        const excludedModelIds = await ViewSetup.getModelIds(imodel,\r\n          \"SS_Master\",\r\n          \"SS_Master_Structural.dgn, 3D Metric Design\",\r\n          \"LandscapeDetails.dgn, 3D Metric Design\",\r\n          \"Stencil Model-4-LandscapeModel, SS_MasterLandscape, SS_MasterLandscape.dgn, Road_Marking\"\r\n        );\r\n        excludedModelIds.forEach((id) => viewState.modelSelector.dropModels(id));\r\n      }\r\n\r\n      // Enable most models on DRWR04-S3 model\r\n      if (imodel.name === metroStationImodelName) {\r\n        const modelIds = await ViewSetup.getModelIds(imodel);\r\n        modelIds.forEach((id) => viewState.modelSelector.addModels(id));\r\n\r\n        const modelsForDropping = await ViewSetup.getModelIds(imodel, \"Geotechnical Investigation, DRWR04-GEO-00-XX-M3-G-00001.dgn, 3d\");\r\n        modelsForDropping.forEach((id) => viewState.modelSelector.dropModels(id));\r\n\r\n        // Change camera\r\n        viewState.setOrigin({ x: 85.69962649857428, y: -73.80364503759616, z: -82.72194576398469 });\r\n        viewState.setExtents({ x: 144.70409923774804, y: 150.2952419865793, z: 151.43496224165358 });\r\n        viewState.setRotation(Matrix3d.fromJSON([-0.8568887533689478, 0.5155013718214635, -1.178475644302565e-15, -0.18679591952287192, -0.31050028450708866, 0.9320390859672258, 0.48046742740732745, 0.7986538104655898, 0.36235775447667495]));\r\n      }\r\n    }\r\n\r\n    const shownCategories = await ViewSetup.getShownCategories(imodel);\r\n    if (shownCategories)\r\n      viewState.categorySelector.addCategories(shownCategories);\r\n\r\n    const hiddenCategories = await ViewSetup.getHiddenCategories(imodel);\r\n    if (hiddenCategories)\r\n      viewState.categorySelector.dropCategories(hiddenCategories);\r\n  }\r\n\r\n  /** Returns a set of every model's id in the iModel. */\r\n  public static async getModelIds(iModel: IModelConnection, ...modelNames: string[]): Promise<Id64Set> {\r\n    const ids = new Set<string>();\r\n    if (!iModel.isClosed) {\r\n      const query = `SELECT ECInstanceId FROM Bis:PhysicalPartition${modelNames.length > 0 ? ` WHERE codeValue IN ('${modelNames.join(\"','\")}')` : \"\"}`;\r\n      for await (const row of iModel.query(query)) {\r\n        ids.add(row[0]);\r\n      }\r\n    }\r\n    return ids;\r\n  }\r\n\r\n  /** Returns a set of every sub category in the specified category codes. */\r\n  public static async getSubCategoryIds(iModel: IModelConnection, ...categoryCodes: string[]): Promise<Id64Set> {\r\n    const subcategoriesIds = new Set<string>();\r\n    if (!iModel.isClosed) {\r\n      const selectSubCategories = `SELECT ECInstanceId as id\r\n                                    FROM BisCore.SubCategory\r\n                                    WHERE Parent.Id IN (\r\n                                      SELECT ECInstanceId\r\n                                      FROM BisCore.SpatialCategory\r\n                                      ${categoryCodes.length > 0 ? `WHERE CodeValue IN ('${categoryCodes.join(\"','\")}')` : \"\"})`;\r\n\r\n      for await (const row of iModel.query(selectSubCategories)) {\r\n        subcategoriesIds.add(row[0]);\r\n      }\r\n    }\r\n    return subcategoriesIds;\r\n  }\r\n\r\n  /** Queries for categories that are unnecessary in the context of the of the sample showcase. */\r\n  private static getHiddenCategories = async (imodel: IModelConnection): Promise<Id64Array | undefined> => {\r\n    const ids: Id64String[] = [];\r\n    const addIdsByCategory = async (...categoryCodes: string[]) => {\r\n      if (!imodel.isClosed) {\r\n        const selectInCategories = `SELECT ECInstanceId FROM bis.Category WHERE CodeValue IN ('${categoryCodes.join(\"','\")}')`;\r\n        for await (const row of imodel.query(selectInCategories))\r\n          ids.push(row.id);\r\n      }\r\n    };\r\n    if (imodel.name === \"house bim upload\")\r\n      // The callout graphics in the house model are ugly - don't display them.\r\n      await addIdsByCategory(\"Callouts\");\r\n\r\n    if (imodel.name === \"Metrostation2\" || imodel.name === metroStationImodelName)\r\n      // There is coincident geometry. Remove the more visible instances.\r\n      await addIdsByCategory(\"A-FLOR-OTLN\", \"A-Reserved Retail Area\", \"G-ANNO-SYMB\", \"A-SITE\", \"S-BEAM-CONC\");\r\n\r\n    return ids;\r\n  };\r\n\r\n  private static getShownCategories = async (imodel: IModelConnection): Promise<Id64Array | undefined> => {\r\n    const ids: Id64String[] = [];\r\n    const addIdsByCategory = async () => {\r\n      if (!imodel.isClosed) {\r\n        const selectInCategories = `SELECT ECInstanceId FROM bis.Category`;\r\n        for await (const row of imodel.query(selectInCategories))\r\n          ids.push(row.id);\r\n      }\r\n    };\r\n    if (imodel.name === metroStationImodelName)\r\n      await addIdsByCategory();\r\n\r\n    return ids;\r\n  };\r\n\r\n  /*\r\n  * groundBias can be stored in Product Settings Service. This method retrieves it.\r\n  */\r\n  public static getGroundBias = async (imodel: IModelConnection): Promise<number | undefined> => {\r\n    if (imodel.name === metroStationImodelName)\r\n      return 3;\r\n\r\n    return undefined;\r\n  };\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { authClient } from \"./common/AuthorizationClient\";\r\nimport { default3DSandboxUi } from \"./common/DefaultViewerProps\";\r\nimport { EmphasizeElementsWidgetProvider } from \"./EmphasizeElementsWidget\";\r\nimport { FrontstageManager } from \"@itwin/appui-react\";\r\nimport { mapLayerOptions } from \"./common/MapLayerOptions\";\r\nimport { Viewer } from \"@itwin/web-viewer-react\";\r\nimport { ViewSetup } from \"./common/ViewSetup\";\r\nimport React, { useEffect } from \"react\";\r\n\r\nconst uiProviders = [new EmphasizeElementsWidgetProvider()];\r\nconst viewportOptions = {\r\n  viewState: ViewSetup.getDefaultView,\r\n};\r\n\r\nconst iTwinId = process.env.IMJS_ITWIN_ID;\r\nconst iModelId = process.env.IMJS_IMODEL_ID;\r\n\r\nconst EmphasizeElementsApp = () => {\r\n  /** Sign-in */\r\n  useEffect(() => {\r\n    void authClient.signIn();\r\n  }, []);\r\n\r\n  /** The sample's render method */\r\n\r\n  return <Viewer\r\n    iTwinId={iTwinId}\r\n    iModelId={iModelId}\r\n    authClient={authClient}\r\n    enablePerformanceMonitors={true}\r\n    viewportOptions={viewportOptions}\r\n    mapLayerOptions={mapLayerOptions}\r\n    defaultUiConfig={default3DSandboxUi}\r\n    uiProviders={uiProviders}\r\n    theme=\"dark\"\r\n  />;\r\n\r\n};\r\n\r\n// Define panel size\r\nFrontstageManager.onFrontstageReadyEvent.addListener((event) => {\r\n  const { bottomPanel } = event.frontstageDef;\r\n  bottomPanel && (bottomPanel.size = 180);\r\n});\r\n\r\nexport default EmphasizeElementsApp;\r\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./EmphasizeElementsApp\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}